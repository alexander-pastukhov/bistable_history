[{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"minimal-example","dir":"Articles","previous_headings":"","what":"Minimal example","title":"Usage examples","text":"main function fit_cumhist() takes data frame time-series first argument. addition, need specify name column codes perceptual state (state argument) column holds either dominance phase duration (duration) onset (onset). code fits data using Gamma distribution (default family) single run single participant. default, function fits cumulative history time constant uses default fixed mixed state value (mixed_state = 0.5) initial history values (history_init = 0). Alternatively, specify onset individual dominance phases used compute duration. can look fitted value history time constant using history_tau() main effect history parameters gamma distribution following model fitted example , see also companion vignette details cumulative history computation. \\[Duration[] \\sim  Gamma(shape[], rate[]) \\\\ log(shape[]) = \\alpha^{shape} + \\beta^{shape}_H \\cdot \\Delta h[] \\\\ log(rate[]) = \\alpha^{rate} + \\beta^{rate}_H \\cdot \\Delta h[] \\\\ \\Delta h[] = \\text{cumulative_history}(\\tau, \\text{history_init})\\\\ \\alpha^{shape}, \\alpha^{rate} \\sim Normal(log(3), 5) \\\\ \\beta^{shape}_H, \\beta^{rate}_H \\sim Normal(0, 1) \\\\ \\tau \\sim Normal(log(1), 0.15)\\]","code":"library(bistablehistory)  data(br_singleblock) gamma_fit <- fit_cumhist(br_singleblock,                          state=\"State\",                          duration=\"Duration\",                          refresh=0) gamma_fit <- fit_cumhist(br_singleblock,                         state=\"State\",                         onset=\"Time\") history_tau(gamma_fit) #> # A tibble: 1 x 3 #>   Estimate `5.5%` `94.5%` #>      <dbl>  <dbl>   <dbl> #> 1    0.986  0.783    1.23 historyef(gamma_fit) #> # A tibble: 2 x 4 #>   DistributionParameter Estimate `5.5%` `94.5%` #>   <fct>                    <dbl>  <dbl>   <dbl> #> 1 shape                    1.05   0.120    1.92 #> 2 scale                    0.269 -0.676    1.31"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"passing-stan-control-parameters","dir":"Articles","previous_headings":"","what":"Passing Stan control parameters","title":"Usage examples","text":"can pass Stan control parameters via control argument, e.g., See Stan documentation details (Carpenter et al. 2017).","code":"gamma_fit <- fit_cumhist(br_singleblock,                         state=\"State\",                         duration=\"Duration\",                         control=list(max_treedepth = 15,                                      adapt_delta = 0.99))"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"run","dir":"Articles","previous_headings":"","what":"Run","title":"Usage examples","text":"default, fit_cumhist() function assumes time-series represent single run, history states initialized beginning. can use run argument pass name column specifies individual runs. case, history initialized beginning every run avoid spill-effects.","code":"gamma_fit <- fit_cumhist(br_single_subject,                         state=\"State\",                         onset=\"Time\",                         run=\"Block\")"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"experimental-session","dir":"Articles","previous_headings":"","what":"Experimental session","title":"Usage examples","text":"Experimental session specifies time-series measured together used compute average dominance phase duration , turn, used computing cumulative history: \\(\\tau_H = \\tau \\cdot <D>\\), \\(\\tau\\) normalized time constant \\(<D>\\) mean dominance phase duration. can used account changes overall alternation rate different sessions (days), , example, participants new stimuli tend “speed ” course days (Suzuki Grabowecky 2007). specify session parameter single mean dominance phase duration computed runs single subject.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"random-effect","dir":"Articles","previous_headings":"","what":"Random effect","title":"Usage examples","text":"random_effect argument allows specify name column codes random effect, e.g., participant identity, bistable display (different displays used single participant), etc. specified, used fit hierarchical model random slopes history effect (\\(\\beta_H\\)). Note random independent intercepts used prior research suggest large differences overall alternation rate participants (Brascamp et al. 2019). , R code specifies participants random effect corresponding model, specified shape parameter identical formulas used rate parameter well. , \\(R_i\\) codes random effect level (participant identity) non-centered parametrization used pooled random slopes. \\[Duration[] \\sim  Gamma(shape[], rate[]) \\\\ log(shape[]) = \\alpha[R_i] + \\beta_H[R_i] \\cdot \\Delta h[] \\\\ \\Delta H[] = \\text{cumulative_history}(\\tau, \\text{history_init})\\\\ \\alpha[R_i] \\sim Normal(log(3), 5) \\\\ \\beta_H[R_i] = \\beta^{pop}_H + \\beta^{z}_H[R_i] \\cdot \\sigma^{pop}_H\\\\ \\beta^{pop}_H \\sim Normal(0, 1) \\\\ \\beta^{z}_H[R_i] \\sim Normal(0, 1) \\\\ \\sigma^{pop}_H \\sim Exponential(1) \\\\ \\tau \\sim Normal(log(1), 0.15)\\] Identical approach take \\(\\tau\\), tau=' \"1|random\"' specified holds mixed_state=' \"1|random\"' argument, see .","code":"gamma_fit <-  fit_cumhist(kde_two_observers,                           state=\"State\",                           duration=\"Duration\",                           random_effect=\"Observer\",                           run=\"Block\")"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"fixed-effects","dir":"Articles","previous_headings":"","what":"Fixed effects","title":"Usage examples","text":"fit_cumhist() functions allows specify multiple fixed effect terms vector strings. implementation restricted : continuous (metric) independent variables used. single value fitted main effect, irrespective whether random effect specified. specify interaction either fixed effects fixed effect cumulative history variable. Although limits usability fixed effects, restrictions allowed simpler model specification simpler underlying code. require complex models, please refer companion vignette provides example writing model using Stan directly. can specify custom priors (mean standard deviation prior normal distribution) via history_effect_prior fixed_effects_priors arguments. former accepts vector mean standard deviation, whereas latter takes named list format . fitted, can use fixef() function extract posterior distribution summary effect.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"cumulative-history-parameters","dir":"Articles","previous_headings":"","what":"Cumulative history parameters","title":"Usage examples","text":"fit_cumhist() function takes three parameters cumulative history computation (see also companion vignette): tau : normalized time constant units mean dominance phase duration. mixed_state : value used mixed/transition state phases, defaults 0.5. history_init : initial value cumulative history onset run. Defaults 0. Note although history_init accepts fixed values either single value used states vector two. contrast, fixed fitted values can used three parameters. possible function argument values single positive number tau single number within [0, 1] range mixed_state. case, value used directly cumulative history computation, default option mixed_state. NULL : single value fitted used participants runs. default tau. 'random' : independent tau fitted random cluster (participant, displays, etc.). random_effect argument must specified. '1|random' : values individual random cluster sampled fitted population distribution (pooled values). random_effect argument must specified. can specify custom priors cumulative history parameter via history_priors argument specifying mean standard deviation prior normal distribution. history_priors argument must named list, , e.g., history_priors = list(\"tau\"=c(1, 0.15)). fitted, can use history_tau() history_mixed_state()functions obtain posterior distribution summary parameter.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"distribution-family","dir":"Articles","previous_headings":"","what":"Distribution family","title":"Usage examples","text":"fit_cumhist currently supports three distributions: 'gamma', 'lognormal', 'normal'.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"gamma","dir":"Articles","previous_headings":"Distribution family","what":"Gamma","title":"Usage examples","text":"\\[Duration[] \\sim Gamma(shape[], rate[])\\] Gamma distribution independent linear models log link function fitted shape rate parameter. Priors intercepts parameters \\(\\alpha ~ Normal(log(3), 5)\\).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"log-normal","dir":"Articles","previous_headings":"Distribution family","what":"Log-normal","title":"Usage examples","text":"\\[Duration[] \\sim LogNormal(\\mu[], \\sigma)\\] \\(\\mu\\) parameter computed via linear model log link function. Priors intercept \\(\\alpha ~ Normal(log(3), 5)\\). Prior \\(\\sigma\\) \\(\\sigma \\sim Exponential(1)\\).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"normal","dir":"Articles","previous_headings":"Distribution family","what":"Normal","title":"Usage examples","text":"\\[Duration[] \\sim Normal(\\mu[], \\sigma)\\] \\(\\mu\\) parameter computed via linear model. Priors intercept \\(\\alpha ~ Normal(3, 5)\\). Prior \\(\\sigma\\) \\(\\sigma \\sim Exponential(1)\\).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model comparison","title":"Usage examples","text":"Models fits can compared via information criteria. Specifically, log likelihood stored log_lik parameter can directly using loo::extract_log_lik() function (see package (@ loo?)) used compute either leave-one-cross-validation (via loo() convenience function) WAIC (via waic()). information criteria can used model comparison way Akaike (AIC), Bayesian (BIC), deviance (DIC) information criteria. latter can also computed log likelihood, however, WAIC LOOCV preferred multi-level models, see (Vehtari, Gelman, Gabry 2017). model comparison can performed via loo::loo_compare() function loo package.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"predicted-values","dir":"Articles","previous_headings":"","what":"Predicted values","title":"Usage examples","text":"can predict durations individual dominance phases via predict() function. option getting summary (average expected duration plus optional credible interval) computing predicted durations every sample. summary statistics 89% credible interval. Predictions every sample full length time-series (invalid samples filled NA): Predictions every sample valid samples:","code":"predictions <- predict(gam_fit, summary = TRUE, probs = c((1-0.89)/2, 1 - (1-0.89)/2)) prediction_samples <- predict(gam_fit, summary = FALSE, full_length = TRUE) prediction_samples <- predict(gam_fit, summary = FALSE, full_length = FALSE)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/usage-examples.html","id":"computing-and-using-cumulative-history","dir":"Articles","previous_headings":"","what":"Computing and using cumulative history","title":"Usage examples","text":"interested cumulative history , can extract fitted object via predict_history() function. Note five different history types can extract: \"1\": cumulative history first perceptual state, .e., state index 1. \"2\": cumulative history second perceptual state, .e., state index 2. \"dominant\": state dominant following phase. \"suppressed\": state suppressed following phase. \"difference\": difference cumulative histories (\\(\\Delta h = h_{suppressed} - h{dominant}\\)), used linear models. Alternatively, can skip fitting compute history directly using predefined values via compute_history().","code":"H <- predict_history(gam_fit, \"difference\") df <- compute_history(br_singleblock,                       state=\"State\",                       duration=\"Duration\",                        tau=1,                       mixed_state=0.5,                       history_init=0)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/writing-stan-code.html","id":"stan-model","dir":"Articles","previous_headings":"","what":"Stan model","title":"Writing Stan code","text":"complete Stan code model log-normal distribution multiple runs single experimental session single participant. history time-constant tau fitted, whereas constants used cumulative history parameters.","code":"data{     // --- Complete time-series ---     int<lower=1> rowsN;     // Number of rows in the COMPLETE multi-timeseries table including mixed phase.     real duration[rowsN];   // Duration of a dominance/transition phase     int istate[rowsN];      // Index of a dominance istate, 1 and 2 code for two competing clear states, 3 - transition/mixed.     int is_used[rowsN];     // Whether history value must used to predict duration or ignored                             // (mixed phases, warm-up period, last, etc.)     int run_start[rowsN];   // 1 marks a beginning of the new time-series (run/block/etc.)     real session_tmean[rowsN]; // Mean dominance phase duration for both CLEAR percepts. Used to scale time-constant.          // --- A shorter clear-states only time-series ---     int clearN;                  // Number of rows in the clear-states only time-series     real clear_duration[clearN]; // Duration for clear percepts only.          // --- Cumulative history parameters     real<lower=0, upper=1> history_starting_values[2]; // Starting values for cumulative history at the beginning of the run     real<lower=0, upper=1> mixed_state;                // Mixed state signal strength } parameters {     real<lower=0> tau; // history time-constant          // linear model for mu     real a;     real bH;          // variance     real<lower=0> sigma; } transformed parameters{     vector[clearN] mu; // vector of computed mu for each clear percept        {         // temporary variables         real current_history[2]; // current computed history         real tau_H;              // tau in the units of time         real dH;                 // computed history difference         int iC = 1;              // Index of clear percepts used for fitting          // matrix with signal levels         matrix[2, 3] level = [[1, 0, mixed_state],                                [0, 1, mixed_state]];          for(iT in 1:rowsN){             // new time-series, recompute absolute tau and reset history state             if (run_start[iT]){                 // reset history                 current_history = history_starting_values;                  // Recompute tau in units of time.                  // This is relevant only for multiple sessions / participants.                 // However, we left this code for generality.                 tau_H = session_tmean[iT] * tau;             }              // for valid percepts, we use history to compute mu             if (is_used[iT] == 1){                 // history difference                 dH = current_history[3-istate[iT]] - current_history[istate[iT]];                  // linear model for mu                 mu[iC] = a + bH * dH;                 iC += 1;             }              // computing history for the NEXT episode             // see vignette on cumulative history             for(iState in 1:2){                 current_history[iState] = level[iState, istate[iT]] +                    (current_history[iState] - level[iState, istate[iT]]) * exp(-duration[iT] / tau_H);             }         }     } } model{   // sampling individual parameters   tau ~ lognormal(log(1), 0.75);   a ~ normal(log(3), 5);   bH ~ normal(0, 1);   sigma ~ exponential(1);      // sampling data using computed mu and sampled sigma   clear_duration ~ lognormal(exp(mu), sigma); }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/writing-stan-code.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Writing Stan code","text":"data section defines model inputs. Hopefully, comments make understanding fairly straightforward. However, several features although needed limited single session / single session make easier generalized code complicated cases. example, dominance phases used fitting. Specifically, mixed perception phases, first dominance phase percept (enough time form reliably history) last dominance phase (curtailed end block) excluded. Valid dominance phases marked is_used vector. total number stored clearN variable actual dominance durations clear_duration. latter strictly necessary allows us avoid loop vectorize sampling statement clear_duration ~ lognormal(exp(mu), sigma);. addition, session_tmean vector rather scalar. necessary single session example opted use better generalize complicated cases. bistability package provides service function preprocess_data() simplifies process preparing data. However, need perform last step, forming list inputs Stan sampling, .","code":"# function that checks data for internal consistency and returns a preprocessed table df <- bistablehistory::preprocess_data(br_single_subject,                                         state=\"State\",                                        duration=\"Duration\",                                        run=\"Block\")  # data for Stan model stan_data <- list(   # complete time-series   rowsN = nrow(df),   duration = df$duration,   istate = df$istate,   is_used = df$is_used,   run_start = df$run_start,   session_tmean = df$session_tmean,      # only valid clear percepts   clearN = sum(df$is_used),   clear_duration = df$duration[df$is_used == 1],      # history parameters, all fixed to default values   history_starting_values = c(0, 0),   mixed_state = 0.5 )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/articles/writing-stan-code.html","id":"using-the-model","dir":"Articles","previous_headings":"","what":"Using the model","title":"Writing Stan code","text":"can use model either rstan cmdstanr packages. example using cmdstanr, assuming model file called example.stan.","code":"# compile the model model <- cmdstanr::cmdstan_model(\"example.stan\")  # sample model fit <- model$sample(data=stan_data, chains=1)  # extract posterior samples for tau parameter tau <- fit$draws(variables = \"tau\")"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov, ., (2022). bistablehistory: R package history-dependent analysis perceptual time series. Journal Open Source Software, 7(70), 3901, doi:10.21105/joss.03901","code":"@Article{,   title = {bistablehistory: an R package for history-dependent analysis of perceptual time series},   author = {Alexander Pastukhov},   journal = {The Journal of Open Source Software},   year = {2022},   volume = {7},   number = {70},   pages = {3901},   url = {https://joss.theoj.org/papers/10.21105/joss.03901},   doi = {10.21105/joss.03901}, }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/index.html","id":"cumulative-history-analysis-for-bistable-perception-time-series","dir":"","previous_headings":"","what":"Cumulative History Analysis for Bistable Perception Time Series","title":"Cumulative History Analysis for Bistable Perception Time Series","text":"package compute cumulative history time-series perceptual dominance bistable displays. Estimates cumulative history, estimate accumulating adaptation/prediction error dominant percept, time-series continuously viewed bistable perceptual rivalry displays. Computes cumulative history via homogeneous first order differential process. .e., assumes exponential growth/decay history function time perceptually dominant state. Supports Gamma, log normal, normal distribution families. use toolbox work, please cite Pastukhov, ., (2022). bistablehistory: R package history-dependent analysis perceptual time series. Journal Open Source Software, 7(70), 3901, https://doi.org/10.21105/joss.03901","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cumulative History Analysis for Bistable Perception Time Series","text":"current stable version use master branch development version. install please use","code":"install.packages(\"bistablehistory\") library(\"devtools\") install_github(\"alexander-pastukhov/bistablehistory\", dependencies = TRUE)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/index.html","id":"note","dir":"","previous_headings":"Installation","what":"Note","title":"Cumulative History Analysis for Bistable Perception Time Series","text":"package uses Stan, “state---art platform statistical modeling high-performance statistical computation”. Therefore, depends package rstantools, turn depends rstan package, uses V8 JavaScript library, V8 R package. Therefore, need install V8 JavaScript library system, recommended also install V8 R package beforehand. detailed instructions, please see https://github.com/jeroen/v8. also need R package curl, depends libcurl-* various operating systems. Please see documentation https://cran.r-project.org/package=curl.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Cumulative History Analysis for Bistable Perception Time Series","text":"main function fit_cumhist takes data frame time-series first argument. Minimally, need specify state — string column name encodes perceptually dominant state — either duration (column name duration individual dominance phases) onset (column name onset times individual dominance phases). Thus, simplest case single subject single run/block measurement defaults (gamma distribution, fitted cumulative history time constant fixed mixed state value history mixing proportion) call , equivalently Now can look fitted value history time constant via main effect history parameters gamma distribution details please see vignettes package usage (Usage examples Cumulative history) example writing Stan code directly (Writing Stan code).","code":"library(bistablehistory) data(br_singleblock) gamma_fit <- fit_cumhist(br_singleblock,                          state = \"State\",                          duration = \"Duration\") library(bistablehistory) data(br_singleblock) gamma_fit <- fit_cumhist(br_singleblock,                          state = \"State\",                          onset = \"Time\") history_tau(gamma_fit) coef(gamma_fit)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bayes_R2.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","title":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","text":"detail refer : Andrew Gelman, Ben Goodrich, Jonah Gabry, Aki Vehtari (2018). R-squared Bayesian regression models. American Statistician doi:10.1080/00031305.2018.1549100  https://avehtari.github.io/bayes_R2/bayes_R2.html","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bayes_R2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","text":"","code":"# S3 method for cumhist bayes_R2(object, summary = TRUE, probs = c(0.055, 0.945), ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bayes_R2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval. ... Unused.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bayes_R2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","text":"vector values data.frame summary","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bayes_R2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes R-squared using Bayesian R-squared approach. — bayes_R2","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 6.827 seconds (Warm-up) #> Chain 1:                5.52 seconds (Sampling) #> Chain 1:                12.347 seconds (Total) #> Chain 1:  bayes_R2(br_fit) #> # A tibble: 1 x 3 #>      R2 `5.5%` `94.5%` #>   <dbl>  <dbl>   <dbl> #> 1 0.335  0.196   0.452 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bistablehistory-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative History Analysis for Bistable Perception Time Series — bistablehistory-package","title":"Cumulative History Analysis for Bistable Perception Time Series — bistablehistory-package","text":"Estimates cumulative history time-series continuously viewed bistable perceptual rivalry displays. Computes cumulative history via homogeneous first order differential process. .e., assumes exponential growth/decay history function time perceptually dominant state, Pastukhov & Braun (2011) doi:10.1167/11.10.12 . Supports Gamma, log normal, normal distribution families. Provides method compute history directly example using computation custom Stan code.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/bistablehistory-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative History Analysis for Bistable Perception Time Series — bistablehistory-package","text":"Stan Development Team (2020). RStan: R interface Stan. R package version 2.21.2. https://mc-stan.org","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br.html","id":null,"dir":"Reference","previous_headings":"","what":"Binocular rivalry data — br","title":"Binocular rivalry data — br","text":"Dataset binocular rivalry eight participants.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binocular rivalry data — br","text":"","code":"br"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Binocular rivalry data — br","text":"data frame 3769 rows 6 variables: Observer Participant ID. Display Display, rows contain \"BR\" Block Run / block index. Time Time relative run onset seconds State Factor levels \"Left\", \"Right\" (clear states), \"Mixed\" Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Binocular rivalry data — br","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Binocular rivalry, variable contrast — br_contrast","title":"Binocular rivalry, variable contrast — br_contrast","text":"Dataset binocular rivalry variable equal contrast six participants.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binocular rivalry, variable contrast — br_contrast","text":"","code":"br_contrast"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_contrast.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Binocular rivalry, variable contrast — br_contrast","text":"data frame 4616 rows 6 variables: Observer Participant ID. Block Run / block index. Contrast Contrast scale 0 1. Time Time relative run onset seconds State Factor levels \"Left\", \"Right\" (clear states), \"Mixed\" Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_singleblock.html","id":null,"dir":"Reference","previous_headings":"","what":"Single run for binocular rivalry stimulus — br_singleblock","title":"Single run for binocular rivalry stimulus — br_singleblock","text":"single subject / single run dataset binocular rivalry.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_singleblock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single run for binocular rivalry stimulus — br_singleblock","text":"","code":"br_singleblock"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_singleblock.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single run for binocular rivalry stimulus — br_singleblock","text":"data frame 76 rows 6 variables: Observer Participant ID, rows contain \"ap\" Group Display, rows contain \"BR\" Block Run / block index, rows contain 1 Time Time relative run onset seconds State Index perceptually dominant state, 1, 2 - clear perceptual state, 3 mixed / transition phase Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_singleblock.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Single run for binocular rivalry stimulus — br_singleblock","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_single_subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Single experimental session for binocular rivalry stimulus — br_single_subject","title":"Single experimental session for binocular rivalry stimulus — br_single_subject","text":"single subject / multiple runs dataset binocular rivalry.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_single_subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single experimental session for binocular rivalry stimulus — br_single_subject","text":"","code":"br_single_subject"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_single_subject.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single experimental session for binocular rivalry stimulus — br_single_subject","text":"data frame 76 rows 6 variables: Observer Participant ID, rows contain \"ap\" Display Display, rows contain \"BR\" Block Run / block index Time Time relative run onset seconds State Index perceptually dominant state, 1, 2 - clear perceptual state, 3 mixed / transition phase Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/br_single_subject.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Single experimental session for binocular rivalry stimulus — br_single_subject","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_fixed_history_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","title":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","text":"Expects either single value within valid range randomN values.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_fixed_history_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","text":"","code":"check_fixed_history_parameter(param_name, param_value, randomN, upperLimit)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_fixed_history_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","text":"param_name Name parameter. param_value single value randomN numeric values. randomN Number levels random variable. upperLimit Upper limit valid param_value.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_fixed_history_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","text":"numeric vector randomN long.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_fixed_history_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluates values for a fixed history parameter — check_fixed_history_parameter","text":"","code":"check_fixed_history_parameter(\"tau\", 1, 10, Inf) #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_normal_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","title":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","text":"pair numeric values, second value non-zero. Stops execution error.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_normal_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","text":"","code":"check_normal_prior(values, parameter)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_normal_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","text":"values Parameters normal distribution. parameter Name parameter prior defined.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_normal_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","text":"Logical TRUE, none tests fail","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/check_normal_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for validity of values for use as normal distribution parameters. — check_normal_prior","text":"","code":"check_normal_prior(c(0, 1), \"tau\") #> [1] TRUE"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/coef.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients — coef.cumhist","title":"Extract Model Coefficients — coef.cumhist","text":"Extracts models population-level coefficients history-specific terms fixed-effect terms every modeled distribution parameter.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/coef.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients — coef.cumhist","text":"","code":"# S3 method for cumhist coef(object, summary = TRUE, probs = c(0.055, 0.945), ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/coef.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients — coef.cumhist","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval. ... Unused.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/coef.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients — coef.cumhist","text":"data.frame values summary","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/coef.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Model Coefficients — coef.cumhist","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock,                       state = \"State\",                       duration = \"Duration\",                       fixed_effects = \"Time\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 30.417 seconds (Warm-up) #> Chain 1:                11.449 seconds (Sampling) #> Chain 1:                41.866 seconds (Total) #> Chain 1:  coef(br_fit) #> # A tibble: 4 x 5 #>   DistributionParameter Term    Estimate    `5.5%`   `94.5%` #>   <fct>                 <chr>      <dbl>     <dbl>     <dbl> #> 1 shape                 History  1.16     0.279     2.17     #> 2 shape                 Time    -0.00406 -0.00714  -0.000754 #> 3 scale                 History  0.0350  -1.16      1.13     #> 4 scale                 Time     0.00430  0.000893  0.00743  # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/compute_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes cumulative history for the time-series — compute_history","title":"Computes cumulative history for the time-series — compute_history","text":"Computes cumulative history state time-series.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/compute_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes cumulative history for the time-series — compute_history","text":"","code":"compute_history(   data,   state,   duration = NULL,   onset = NULL,   random_effect = NULL,   session = NULL,   run = NULL,   tau = 1,   mixed_state = 0.5,   history_init = 0 )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/compute_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes cumulative history for the time-series — compute_history","text":"data table time-series. state String, name column specifies perceptual state. column type factor two three levels (third level assumed correspond transition/mixed phase) convertible two level factor (impossible infer identity transition/ mixed phase). duration String, name column duration individual perceptual dominance phases. Optional, can specify onset instead. onset String, name column onsets perceptual dominance states. Optional, used compute duration dominance phases, provided explicitly via duration parameter. random_effect String, name column identifies random effect, e.g. individual participants, stimuli single participant, etc. omitted, random effect assumed. specified one level (participant, stimulus, etc.), used hierarchical model. session String, name column identifies unique experimental session mean dominance phase duration computed (see norm_tau parameter). Code assumes session IDs different within participant can . omitted, single mean dominance duration based entire time series used. run String, name column identifies unique runs/blocks. omitted, data assumed belong single time series. Code assumes run IDs different within experimental session can session. E.g. session , runs 1, 2, 3.. session B, runs 1, 2, 3 session , runs 1, 2, 1. tau Time constant exponential growth/decay normalized mean duration clear percepts within session. Can 1) single positive number (>0) used participants runs, 2) NULL (default) -  single value fitted participants runs, 3) \"random\" - independent tau fitted random cluster, 4) \"1|random\"- tau random cluster sampled population distribution, .e., pooled parameter values via multilevel model. mixed_state Specifies activation level transition/mixed phases (state #3, see state). Either single number (range 0..1) used fixed level vector two numbers c(mu, kappa) specifies, correspondingly, mean (range 0..1) precision (>0) beta proportion distribution, sampled . Defaults fixed value 0.5. history_init Initial value cumulative history computation. Either numeric scalar 0..1 range vector two numbers 0..1 range. latter case, two histories start different levels.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/compute_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes cumulative history for the time-series — compute_history","text":"matrix nrow(data) × 2 computed history values","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/compute_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes cumulative history for the time-series — compute_history","text":"","code":"df <- compute_history(br_singleblock, state = \"State\",                       duration = \"Duration\", tau = 1,                       mixed_state = 0.5, history_init = 0) #> Warning: Unknown or uninitialised column: `State`."},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/cumhist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class cumhist. — cumhist-class","title":"Class cumhist. — cumhist-class","text":"Cumulative history model fitted time-series data.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/cumhist-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class cumhist. — cumhist-class","text":"See methods(class = \"cumhist\") overview available methods.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/cumhist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class cumhist. — cumhist-class","text":"family string distribution family. data list preprocessed data. stanfit stanfit object.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates validity of initial history values. — evaluate_history_init","title":"Evaluates validity of initial history values. — evaluate_history_init","text":"Checks number range values. scalar passed, uses value states.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates validity of initial history values. — evaluate_history_init","text":"","code":"evaluate_history_init(history_init)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates validity of initial history values. — evaluate_history_init","text":"history_init Either single value pair values within 0..1 range.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluates validity of initial history values. — evaluate_history_init","text":"vector two values","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluates validity of initial history values. — evaluate_history_init","text":"","code":"evaluate_history_init(0.5) #> [1] 0.5 0.5"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","title":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","text":"Evaluation based param_value. single positive number (>0) used participants runs. NULL (default) -  single value fitted participants runs, also applied randomN == 1. \"random\" - independent value fitted random cluster. \"1|random\"- value random cluster sampled population distribution, .e., pooled parameter values via multilevel model.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","text":"","code":"evaluate_history_option(param_name, param_value, randomN, upperLimit)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","text":"param_name Name parameter. param_value Value fit_cumhist function call. randomN Number levels random variable. upperLimit Upper limit valid param_value.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","text":"list <param_name>_option fixed_<param_name>.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/evaluate_history_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluates whether and how to fit a cumulative history parameter. — evaluate_history_option","text":"","code":"evaluate_history_option(\"tau\", 1, 1, Inf) #> $tau_option #> [1] 1 #>  #> $fixed_tau #> [1] 1 #>  #> $tau_mu_size #> [1] 0 #>  #> $tau_sigma_size #> [1] 0 #>  #> $tau_rnd_size #> [1] 0 #>"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes history for a fitted model — extract_history","title":"Computes history for a fitted model — extract_history","text":"Computes history fitted model, uses mean values history parameter. Uses values random cluster, \"random\" \"1|random\" parametrisation used.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes history for a fitted model — extract_history","text":"","code":"extract_history(object)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes history for a fitted model — extract_history","text":"object object class cumhist","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes history for a fitted model — extract_history","text":"matrix cumulative history values state","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes history for a fitted model — extract_history","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.554 seconds (Warm-up) #> Chain 1:                4.275 seconds (Sampling) #> Chain 1:                8.829 seconds (Total) #> Chain 1:  extract_history(br_fit) #>               1         2 #>  [1,] 0.0000000 0.0000000 #>  [2,] 0.4447766 0.0000000 #>  [3,] 0.2251146 0.4938705 #>  [4,] 0.5424931 0.2915904 #>  [5,] 0.3170203 0.5860220 #>  [6,] 0.7995474 0.1719958 #>  [7,] 0.3089143 0.6800911 #>  [8,] 0.7639363 0.2323081 #>  [9,] 0.3391252 0.6592076 #> [10,] 0.6997565 0.2994861 #> [11,] 0.2515760 0.7481517 #> [12,] 0.8344187 0.1655210 #> [13,] 0.2551863 0.7447953 #> [14,] 0.7836364 0.2163583 #> [15,] 0.2875886 0.7124095 #> [16,] 0.7281983 0.2718009 #> [17,] 0.2591222 0.7408775 #> [18,] 0.6695000 0.3304999 #> [19,] 0.2823764 0.7176235 #> [20,] 0.6871171 0.3128828 #> [21,] 0.2647937 0.7352063 #> [22,] 0.7121947 0.2878053 #> [23,] 0.2340086 0.7659914 #> [24,] 0.7728592 0.2271408 #> [25,] 0.2808030 0.7191970 #> [26,] 0.7112020 0.2887980 #> [27,] 0.1775154 0.8224846 #> [28,] 0.7484635 0.2515365 #> [29,] 0.1707358 0.8292642 #> [30,] 0.8053548 0.1946452 #> [31,] 0.3135678 0.6864322 #> [32,] 0.7655259 0.2344741 #> [33,] 0.2867818 0.7132182 #> [34,] 0.7637795 0.2362205 #> [35,] 0.1986463 0.8013537 #> [36,] 0.6997964 0.3002036 #> [37,] 0.2365928 0.7634072 #> [38,] 0.8460380 0.1539620 #> [39,] 0.2292830 0.7707170 #> [40,] 0.7340819 0.2659181 #> [41,] 0.3841714 0.6158286 #> [42,] 0.6021592 0.3978408 #> [43,] 0.2350566 0.7649434 #> [44,] 0.8218321 0.1781679 #> [45,] 0.2894481 0.7105519 #> [46,] 0.8314946 0.1685054 #> [47,] 0.4350390 0.5649610 #> [48,] 0.5860071 0.4139929 #> [49,] 0.5573041 0.4426959 #> [50,] 0.3419833 0.6580167 #> [51,] 0.4298535 0.5701465 #> [52,] 0.6456085 0.3543915 #> [53,] 0.2513700 0.7486300 #> [54,] 0.7016166 0.2983834 #> [55,] 0.1737771 0.8262229 #> [56,] 0.8618899 0.1381101 #> [57,] 0.3099458 0.6900542 #> [58,] 0.4324507 0.5675493 #> [59,] 0.4699364 0.5300636 #> [60,] 0.6504478 0.3495522 #> [61,] 0.2262182 0.7737818 #> [62,] 0.6232824 0.3767176 #> [63,] 0.3004184 0.6995816 #> [64,] 0.7838382 0.2161618 #> [65,] 0.2075663 0.7924337 #> [66,] 0.6545000 0.3455000 #> [67,] 0.2965075 0.7034925 #> [68,] 0.7997498 0.2002502 #> [69,] 0.2058730 0.7941270 #> [70,] 0.8077604 0.1922396 #> [71,] 0.1399738 0.8600262 #> [72,] 0.8562394 0.1437606 #> [73,] 0.2721579 0.7278421 #> [74,] 0.7686535 0.2313465 #> [75,] 0.2104650 0.7895350 #> [76,] 0.8221962 0.1778038 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts a history parameter as a matrix — extract_history_parameter","title":"Extracts a history parameter as a matrix — extract_history_parameter","text":"Extracts history parameter matrix samplesN rows randomN (found object$data$randomN) columns.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts a history parameter as a matrix — extract_history_parameter","text":"","code":"extract_history_parameter(   object,   param_name,   samplesN = NULL,   link_function = NULL )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts a history parameter as a matrix — extract_history_parameter","text":"object cumhist object param_name String, name parameter samplesN Number samples, NULL computed rstan (cheaper ). link_function link function use (exp inv.logit) NULL identity.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts a history parameter as a matrix — extract_history_parameter","text":"Matrix samplesN rows randomN (found object$data$randomN) columns","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_history_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts a history parameter as a matrix — extract_history_parameter","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.295 seconds (Warm-up) #> Chain 1:                4.367 seconds (Sampling) #> Chain 1:                8.662 seconds (Total) #> Chain 1:  extract_history_parameter(br_fit, \"tau\", link_function = exp) #>              [,1] #>    [1,] 0.8084543 #>    [2,] 1.2574251 #>    [3,] 1.1920120 #>    [4,] 0.9192230 #>    [5,] 0.8589358 #>    [6,] 1.0003208 #>    [7,] 0.8700452 #>    [8,] 0.9123564 #>    [9,] 0.9348842 #>   [10,] 0.9334077 #>   [11,] 0.9576078 #>   [12,] 1.1785058 #>   [13,] 1.1501242 #>   [14,] 0.9504292 #>   [15,] 1.0328582 #>   [16,] 0.7902306 #>   [17,] 1.1290777 #>   [18,] 1.0738906 #>   [19,] 0.9767241 #>   [20,] 1.0703115 #>   [21,] 1.0015181 #>   [22,] 0.9582884 #>   [23,] 0.9186681 #>   [24,] 0.9751899 #>   [25,] 0.8410455 #>   [26,] 1.0931206 #>   [27,] 0.8844884 #>   [28,] 0.8439530 #>   [29,] 0.9421342 #>   [30,] 1.0272073 #>   [31,] 0.9521803 #>   [32,] 0.8313196 #>   [33,] 1.2124140 #>   [34,] 1.1163557 #>   [35,] 1.0944380 #>   [36,] 1.0885766 #>   [37,] 1.0204375 #>   [38,] 0.7284146 #>   [39,] 1.1732256 #>   [40,] 0.9660648 #>   [41,] 1.1434286 #>   [42,] 0.8772421 #>   [43,] 1.1765972 #>   [44,] 1.0461289 #>   [45,] 1.0262494 #>   [46,] 0.9534875 #>   [47,] 0.8906917 #>   [48,] 0.9036885 #>   [49,] 0.8374018 #>   [50,] 1.1169510 #>   [51,] 1.1386321 #>   [52,] 0.9921875 #>   [53,] 0.9934836 #>   [54,] 1.0895415 #>   [55,] 1.1916054 #>   [56,] 1.1960113 #>   [57,] 0.9493166 #>   [58,] 0.9195970 #>   [59,] 0.8461039 #>   [60,] 0.8501359 #>   [61,] 0.8697423 #>   [62,] 1.0395515 #>   [63,] 0.9629397 #>   [64,] 1.1127565 #>   [65,] 0.9482718 #>   [66,] 0.8769842 #>   [67,] 0.8894143 #>   [68,] 1.1776772 #>   [69,] 1.0050082 #>   [70,] 0.8472398 #>   [71,] 1.0670091 #>   [72,] 0.9842217 #>   [73,] 1.1343740 #>   [74,] 0.8181154 #>   [75,] 1.0117569 #>   [76,] 0.8417833 #>   [77,] 0.8762605 #>   [78,] 1.3284499 #>   [79,] 1.2641497 #>   [80,] 0.7052366 #>   [81,] 0.9511067 #>   [82,] 1.1118404 #>   [83,] 1.0408025 #>   [84,] 1.0201581 #>   [85,] 1.0738541 #>   [86,] 0.9134056 #>   [87,] 0.9562120 #>   [88,] 0.8974756 #>   [89,] 1.1507851 #>   [90,] 0.9213816 #>   [91,] 0.9712085 #>   [92,] 1.0341418 #>   [93,] 1.1462753 #>   [94,] 0.9927900 #>   [95,] 0.7557306 #>   [96,] 1.0991711 #>   [97,] 0.6678204 #>   [98,] 1.0714870 #>   [99,] 1.0986914 #>  [100,] 1.1115200 #>  [101,] 1.2299301 #>  [102,] 0.8173104 #>  [103,] 0.9158981 #>  [104,] 1.0289724 #>  [105,] 0.8523052 #>  [106,] 0.9888024 #>  [107,] 0.8270442 #>  [108,] 0.9329876 #>  [109,] 0.9308102 #>  [110,] 1.1994308 #>  [111,] 0.7346457 #>  [112,] 1.0962413 #>  [113,] 1.1255479 #>  [114,] 1.1368914 #>  [115,] 1.3288941 #>  [116,] 1.1589736 #>  [117,] 1.1750680 #>  [118,] 0.8985847 #>  [119,] 1.4108476 #>  [120,] 0.8725207 #>  [121,] 1.0228902 #>  [122,] 0.8156412 #>  [123,] 1.0156633 #>  [124,] 0.8408789 #>  [125,] 0.9047288 #>  [126,] 0.9905160 #>  [127,] 1.0035390 #>  [128,] 1.0446702 #>  [129,] 0.8683795 #>  [130,] 0.8459113 #>  [131,] 0.8575705 #>  [132,] 1.0521589 #>  [133,] 1.1384744 #>  [134,] 1.0358748 #>  [135,] 1.0966427 #>  [136,] 0.8854844 #>  [137,] 1.0889951 #>  [138,] 1.0045480 #>  [139,] 1.0071078 #>  [140,] 1.1684948 #>  [141,] 0.9604794 #>  [142,] 1.0582105 #>  [143,] 1.0311405 #>  [144,] 1.2087373 #>  [145,] 1.0881770 #>  [146,] 0.7360421 #>  [147,] 0.9438845 #>  [148,] 0.9262539 #>  [149,] 0.7250673 #>  [150,] 1.0147067 #>  [151,] 1.1324501 #>  [152,] 0.8506858 #>  [153,] 1.0148544 #>  [154,] 0.9556513 #>  [155,] 0.8707414 #>  [156,] 0.9776416 #>  [157,] 0.8663272 #>  [158,] 0.8369593 #>  [159,] 0.8306708 #>  [160,] 1.0136292 #>  [161,] 1.1228023 #>  [162,] 0.7045463 #>  [163,] 0.8915128 #>  [164,] 0.8649770 #>  [165,] 0.7404790 #>  [166,] 0.9538323 #>  [167,] 1.0116084 #>  [168,] 0.9997928 #>  [169,] 1.1015300 #>  [170,] 0.9432079 #>  [171,] 1.1303274 #>  [172,] 1.2908635 #>  [173,] 0.8105745 #>  [174,] 1.0113316 #>  [175,] 1.2611040 #>  [176,] 1.0059883 #>  [177,] 1.0676352 #>  [178,] 1.0977608 #>  [179,] 1.0804191 #>  [180,] 0.7396923 #>  [181,] 0.7116590 #>  [182,] 1.2177478 #>  [183,] 0.6834213 #>  [184,] 1.2792820 #>  [185,] 0.9964941 #>  [186,] 0.9148908 #>  [187,] 1.2144987 #>  [188,] 1.0989642 #>  [189,] 1.0680066 #>  [190,] 0.7870255 #>  [191,] 1.1486944 #>  [192,] 0.8805512 #>  [193,] 0.8928991 #>  [194,] 1.1090117 #>  [195,] 0.9041253 #>  [196,] 1.0334424 #>  [197,] 0.9729350 #>  [198,] 0.7014574 #>  [199,] 0.7621787 #>  [200,] 0.9325613 #>  [201,] 0.8560452 #>  [202,] 0.7407709 #>  [203,] 1.2961322 #>  [204,] 0.8181734 #>  [205,] 0.7792853 #>  [206,] 0.8549059 #>  [207,] 0.6538627 #>  [208,] 1.1063973 #>  [209,] 1.0274332 #>  [210,] 0.9972514 #>  [211,] 0.8757863 #>  [212,] 1.0142062 #>  [213,] 0.9496899 #>  [214,] 0.8231658 #>  [215,] 0.8249440 #>  [216,] 0.8789830 #>  [217,] 0.7972102 #>  [218,] 0.9163020 #>  [219,] 0.7371019 #>  [220,] 0.9735647 #>  [221,] 0.8362815 #>  [222,] 1.0984923 #>  [223,] 0.9433018 #>  [224,] 0.9934522 #>  [225,] 0.9254720 #>  [226,] 0.8679136 #>  [227,] 0.9210981 #>  [228,] 0.9057316 #>  [229,] 1.1163322 #>  [230,] 1.2714556 #>  [231,] 0.8624692 #>  [232,] 0.9487045 #>  [233,] 1.1158532 #>  [234,] 0.9592664 #>  [235,] 1.0626880 #>  [236,] 0.7879711 #>  [237,] 0.9796948 #>  [238,] 0.8159571 #>  [239,] 0.8949387 #>  [240,] 0.9768336 #>  [241,] 1.1219728 #>  [242,] 1.0390851 #>  [243,] 1.0274288 #>  [244,] 0.9804040 #>  [245,] 0.9676331 #>  [246,] 0.9847964 #>  [247,] 1.1105958 #>  [248,] 0.9360115 #>  [249,] 0.9792849 #>  [250,] 1.0490425 #>  [251,] 0.5610755 #>  [252,] 0.9598981 #>  [253,] 1.1543573 #>  [254,] 0.9725133 #>  [255,] 1.2486676 #>  [256,] 0.8354625 #>  [257,] 0.9418940 #>  [258,] 0.9634969 #>  [259,] 1.0148193 #>  [260,] 0.9018200 #>  [261,] 1.0495094 #>  [262,] 1.1088692 #>  [263,] 1.0963357 #>  [264,] 0.9808504 #>  [265,] 0.8589790 #>  [266,] 0.9395738 #>  [267,] 1.2631071 #>  [268,] 1.0024583 #>  [269,] 1.0103610 #>  [270,] 0.8389762 #>  [271,] 0.8803530 #>  [272,] 0.8973520 #>  [273,] 0.9660263 #>  [274,] 1.0572784 #>  [275,] 1.1581434 #>  [276,] 0.8314702 #>  [277,] 1.0291371 #>  [278,] 1.0279209 #>  [279,] 1.3519710 #>  [280,] 0.9707717 #>  [281,] 1.0234314 #>  [282,] 1.1227646 #>  [283,] 0.8908469 #>  [284,] 0.9972907 #>  [285,] 0.9052084 #>  [286,] 0.8985250 #>  [287,] 1.0773216 #>  [288,] 1.0510811 #>  [289,] 1.1038954 #>  [290,] 0.9946401 #>  [291,] 0.7948694 #>  [292,] 0.8684070 #>  [293,] 0.8143813 #>  [294,] 1.1866232 #>  [295,] 0.9829840 #>  [296,] 1.1741471 #>  [297,] 0.9962520 #>  [298,] 0.9016979 #>  [299,] 0.9271161 #>  [300,] 1.0311055 #>  [301,] 1.0770350 #>  [302,] 0.9006890 #>  [303,] 0.8500562 #>  [304,] 1.0675661 #>  [305,] 0.8999578 #>  [306,] 0.9849322 #>  [307,] 0.9947992 #>  [308,] 1.0717407 #>  [309,] 1.0908309 #>  [310,] 0.9202761 #>  [311,] 0.9240606 #>  [312,] 1.0051583 #>  [313,] 0.8440015 #>  [314,] 0.8899803 #>  [315,] 1.0028717 #>  [316,] 0.9007604 #>  [317,] 0.9421333 #>  [318,] 1.1089949 #>  [319,] 0.9638295 #>  [320,] 0.8531364 #>  [321,] 1.0849802 #>  [322,] 0.8870088 #>  [323,] 0.8858517 #>  [324,] 1.2831513 #>  [325,] 0.9969445 #>  [326,] 1.0430046 #>  [327,] 0.7334718 #>  [328,] 1.1142242 #>  [329,] 1.0447773 #>  [330,] 0.9117814 #>  [331,] 1.2965357 #>  [332,] 1.0321467 #>  [333,] 1.0004769 #>  [334,] 1.1458273 #>  [335,] 0.9931582 #>  [336,] 1.0500763 #>  [337,] 0.8728241 #>  [338,] 1.1384558 #>  [339,] 1.0829627 #>  [340,] 1.0000867 #>  [341,] 1.2957579 #>  [342,] 0.9197373 #>  [343,] 0.8925871 #>  [344,] 0.9070070 #>  [345,] 1.0592399 #>  [346,] 0.8162482 #>  [347,] 1.2733562 #>  [348,] 1.2065253 #>  [349,] 1.0950691 #>  [350,] 1.0787367 #>  [351,] 1.3711206 #>  [352,] 1.1677808 #>  [353,] 0.9021630 #>  [354,] 1.2362770 #>  [355,] 1.2551170 #>  [356,] 1.0710222 #>  [357,] 1.0205294 #>  [358,] 0.9912848 #>  [359,] 1.0991312 #>  [360,] 0.8927582 #>  [361,] 0.9188448 #>  [362,] 0.9339611 #>  [363,] 0.9730873 #>  [364,] 0.9574230 #>  [365,] 0.7194897 #>  [366,] 1.0547941 #>  [367,] 0.8742998 #>  [368,] 0.9150370 #>  [369,] 0.5921057 #>  [370,] 1.1158278 #>  [371,] 0.7917746 #>  [372,] 1.1291690 #>  [373,] 0.9265544 #>  [374,] 0.8886534 #>  [375,] 0.8707231 #>  [376,] 1.1507465 #>  [377,] 1.1182964 #>  [378,] 1.1090688 #>  [379,] 1.0585287 #>  [380,] 0.9715197 #>  [381,] 0.8580160 #>  [382,] 0.8596233 #>  [383,] 0.8857046 #>  [384,] 1.1535713 #>  [385,] 0.9040118 #>  [386,] 0.9989564 #>  [387,] 0.7385010 #>  [388,] 1.4147133 #>  [389,] 0.8715234 #>  [390,] 0.8236816 #>  [391,] 1.1189582 #>  [392,] 1.0000233 #>  [393,] 0.9808394 #>  [394,] 0.9077521 #>  [395,] 0.9267952 #>  [396,] 0.9362515 #>  [397,] 1.0553793 #>  [398,] 1.0917549 #>  [399,] 0.8908630 #>  [400,] 0.9896874 #>  [401,] 1.0730437 #>  [402,] 0.9481260 #>  [403,] 1.1431752 #>  [404,] 0.8624363 #>  [405,] 0.8890824 #>  [406,] 1.0048999 #>  [407,] 0.9530856 #>  [408,] 1.2480134 #>  [409,] 1.0851922 #>  [410,] 1.0102658 #>  [411,] 0.9451380 #>  [412,] 1.2042553 #>  [413,] 0.8927368 #>  [414,] 1.1222110 #>  [415,] 0.9491358 #>  [416,] 1.1615677 #>  [417,] 1.2268531 #>  [418,] 0.9765067 #>  [419,] 0.8428317 #>  [420,] 0.8833226 #>  [421,] 1.0875580 #>  [422,] 0.9459329 #>  [423,] 0.8881908 #>  [424,] 0.8974739 #>  [425,] 0.9802018 #>  [426,] 0.9441875 #>  [427,] 0.8781885 #>  [428,] 0.7541010 #>  [429,] 1.0336876 #>  [430,] 1.0143873 #>  [431,] 0.8882469 #>  [432,] 1.1124993 #>  [433,] 0.7850710 #>  [434,] 0.8343110 #>  [435,] 0.8012615 #>  [436,] 1.0348759 #>  [437,] 1.0102828 #>  [438,] 0.7414208 #>  [439,] 1.2369316 #>  [440,] 1.0368661 #>  [441,] 1.0410540 #>  [442,] 1.0868285 #>  [443,] 0.8255762 #>  [444,] 0.9301642 #>  [445,] 1.1022523 #>  [446,] 0.9500364 #>  [447,] 1.1540161 #>  [448,] 1.1079754 #>  [449,] 0.8887585 #>  [450,] 1.0362997 #>  [451,] 1.1216968 #>  [452,] 0.9477134 #>  [453,] 0.8175604 #>  [454,] 0.7162234 #>  [455,] 1.0438176 #>  [456,] 1.0512780 #>  [457,] 0.8759894 #>  [458,] 0.9049564 #>  [459,] 1.0286434 #>  [460,] 1.0794199 #>  [461,] 0.9567217 #>  [462,] 1.0129189 #>  [463,] 0.9451848 #>  [464,] 1.2263749 #>  [465,] 1.1236506 #>  [466,] 1.1153360 #>  [467,] 0.9050479 #>  [468,] 1.0022081 #>  [469,] 1.0895150 #>  [470,] 0.8869897 #>  [471,] 0.9562182 #>  [472,] 0.9444271 #>  [473,] 1.1190194 #>  [474,] 0.9964147 #>  [475,] 1.0157333 #>  [476,] 0.8914524 #>  [477,] 0.8453259 #>  [478,] 0.7458407 #>  [479,] 0.9431064 #>  [480,] 1.0335184 #>  [481,] 0.9804459 #>  [482,] 1.0286671 #>  [483,] 0.8278649 #>  [484,] 0.8518651 #>  [485,] 1.2055923 #>  [486,] 0.9653341 #>  [487,] 0.9507774 #>  [488,] 1.0153574 #>  [489,] 1.1423126 #>  [490,] 0.9723210 #>  [491,] 1.1337568 #>  [492,] 1.0868136 #>  [493,] 1.1103300 #>  [494,] 1.1031038 #>  [495,] 0.8473882 #>  [496,] 1.0576147 #>  [497,] 0.9316944 #>  [498,] 0.9689781 #>  [499,] 1.0571149 #>  [500,] 0.9532233 #>  [501,] 1.0019791 #>  [502,] 0.8093268 #>  [503,] 1.0637603 #>  [504,] 0.9454636 #>  [505,] 1.0008368 #>  [506,] 1.0512879 #>  [507,] 0.8803507 #>  [508,] 1.0114963 #>  [509,] 0.9965878 #>  [510,] 1.0815338 #>  [511,] 1.0577872 #>  [512,] 0.8130908 #>  [513,] 0.8731254 #>  [514,] 1.0393065 #>  [515,] 0.8171074 #>  [516,] 1.0705071 #>  [517,] 0.8229298 #>  [518,] 0.8496766 #>  [519,] 0.8776111 #>  [520,] 0.9859562 #>  [521,] 0.8816155 #>  [522,] 1.1112581 #>  [523,] 1.2307250 #>  [524,] 1.0322291 #>  [525,] 1.3585460 #>  [526,] 1.0566889 #>  [527,] 1.1136206 #>  [528,] 0.8603370 #>  [529,] 1.0126827 #>  [530,] 0.8519401 #>  [531,] 1.1102188 #>  [532,] 0.9487432 #>  [533,] 0.8732051 #>  [534,] 1.0137931 #>  [535,] 0.9107094 #>  [536,] 0.8632235 #>  [537,] 0.8111373 #>  [538,] 0.7347906 #>  [539,] 0.9813408 #>  [540,] 1.2029622 #>  [541,] 0.7395390 #>  [542,] 0.9959732 #>  [543,] 0.9264643 #>  [544,] 0.9141540 #>  [545,] 1.0194114 #>  [546,] 0.8369326 #>  [547,] 0.8453185 #>  [548,] 0.8761301 #>  [549,] 1.0073924 #>  [550,] 1.1384259 #>  [551,] 0.9911067 #>  [552,] 1.0142561 #>  [553,] 0.9416271 #>  [554,] 0.9736266 #>  [555,] 0.6397787 #>  [556,] 1.1550397 #>  [557,] 0.9654280 #>  [558,] 1.2360496 #>  [559,] 0.9391995 #>  [560,] 0.8651662 #>  [561,] 0.9992889 #>  [562,] 1.1058091 #>  [563,] 1.0932677 #>  [564,] 0.9230202 #>  [565,] 0.7871762 #>  [566,] 1.0543546 #>  [567,] 1.1029567 #>  [568,] 1.0341498 #>  [569,] 0.7260871 #>  [570,] 1.0128565 #>  [571,] 0.9578323 #>  [572,] 0.9771886 #>  [573,] 0.8705311 #>  [574,] 1.2202195 #>  [575,] 0.8637211 #>  [576,] 1.0242710 #>  [577,] 0.9271032 #>  [578,] 0.9149409 #>  [579,] 1.1342221 #>  [580,] 0.8957767 #>  [581,] 0.9479952 #>  [582,] 0.9051272 #>  [583,] 1.0473052 #>  [584,] 0.9017981 #>  [585,] 1.1358109 #>  [586,] 0.9518781 #>  [587,] 0.8972000 #>  [588,] 0.8932869 #>  [589,] 1.0576020 #>  [590,] 0.7900945 #>  [591,] 0.8577750 #>  [592,] 1.0078513 #>  [593,] 1.0025271 #>  [594,] 1.0432011 #>  [595,] 0.8176629 #>  [596,] 1.0232783 #>  [597,] 0.9007582 #>  [598,] 0.9607172 #>  [599,] 1.3938876 #>  [600,] 1.1857474 #>  [601,] 1.0436373 #>  [602,] 1.0067420 #>  [603,] 0.9957333 #>  [604,] 1.0039482 #>  [605,] 1.0704769 #>  [606,] 1.1804841 #>  [607,] 1.0662823 #>  [608,] 0.8891482 #>  [609,] 0.8259261 #>  [610,] 1.1459749 #>  [611,] 1.1078298 #>  [612,] 0.8758372 #>  [613,] 0.9817782 #>  [614,] 1.1206404 #>  [615,] 0.8179889 #>  [616,] 0.9612797 #>  [617,] 0.9258229 #>  [618,] 0.7669859 #>  [619,] 1.1051632 #>  [620,] 1.0568408 #>  [621,] 1.0152706 #>  [622,] 0.9520441 #>  [623,] 1.0166865 #>  [624,] 1.2426007 #>  [625,] 1.1502106 #>  [626,] 0.7718964 #>  [627,] 0.8385221 #>  [628,] 1.0826468 #>  [629,] 1.0721861 #>  [630,] 0.7873368 #>  [631,] 0.9363682 #>  [632,] 1.2191118 #>  [633,] 1.1245821 #>  [634,] 1.1700357 #>  [635,] 0.9095433 #>  [636,] 0.8563947 #>  [637,] 1.0652797 #>  [638,] 1.0742032 #>  [639,] 0.9568133 #>  [640,] 1.1168899 #>  [641,] 1.0117160 #>  [642,] 0.8783442 #>  [643,] 0.8248162 #>  [644,] 0.8988086 #>  [645,] 0.8714098 #>  [646,] 1.0506308 #>  [647,] 0.9634969 #>  [648,] 0.9195639 #>  [649,] 0.8722111 #>  [650,] 1.0830198 #>  [651,] 0.9555306 #>  [652,] 1.1111872 #>  [653,] 1.0401816 #>  [654,] 0.8943095 #>  [655,] 0.8452577 #>  [656,] 0.9904448 #>  [657,] 1.0578559 #>  [658,] 0.9350542 #>  [659,] 1.3014715 #>  [660,] 0.8631486 #>  [661,] 1.2974864 #>  [662,] 1.0084883 #>  [663,] 1.0828756 #>  [664,] 1.0188477 #>  [665,] 1.1828060 #>  [666,] 0.7877110 #>  [667,] 1.0477391 #>  [668,] 0.7120206 #>  [669,] 0.9698743 #>  [670,] 0.8506858 #>  [671,] 0.9834809 #>  [672,] 1.0726914 #>  [673,] 0.8428731 #>  [674,] 0.9490609 #>  [675,] 1.0613229 #>  [676,] 0.9646207 #>  [677,] 0.8924469 #>  [678,] 0.8837326 #>  [679,] 1.1915218 #>  [680,] 0.8150319 #>  [681,] 0.9821523 #>  [682,] 1.1323098 #>  [683,] 0.9515653 #>  [684,] 1.0432506 #>  [685,] 1.1763172 #>  [686,] 0.8358468 #>  [687,] 1.0786509 #>  [688,] 1.2942778 #>  [689,] 0.9263551 #>  [690,] 0.9023710 #>  [691,] 1.1589622 #>  [692,] 0.7467947 #>  [693,] 1.0361784 #>  [694,] 0.9202130 #>  [695,] 1.1900777 #>  [696,] 1.0645567 #>  [697,] 0.9994919 #>  [698,] 1.1437333 #>  [699,] 0.8717889 #>  [700,] 1.2516439 #>  [701,] 0.7431426 #>  [702,] 1.0438318 #>  [703,] 1.1004716 #>  [704,] 0.9381862 #>  [705,] 0.9141365 #>  [706,] 1.2076185 #>  [707,] 0.9872639 #>  [708,] 0.8563406 #>  [709,] 1.3349300 #>  [710,] 0.9679538 #>  [711,] 1.2423928 #>  [712,] 0.9569022 #>  [713,] 1.1244050 #>  [714,] 1.1318441 #>  [715,] 1.1938740 #>  [716,] 1.0097076 #>  [717,] 1.0015730 #>  [718,] 0.7411729 #>  [719,] 0.9831389 #>  [720,] 0.9209700 #>  [721,] 1.0678360 #>  [722,] 0.8161352 #>  [723,] 1.1061262 #>  [724,] 0.7660312 #>  [725,] 0.8771763 #>  [726,] 1.2325766 #>  [727,] 1.1213976 #>  [728,] 1.0367617 #>  [729,] 0.8395313 #>  [730,] 0.8539316 #>  [731,] 1.0842157 #>  [732,] 1.2039874 #>  [733,] 0.8230587 #>  [734,] 0.9604917 #>  [735,] 0.7315479 #>  [736,] 0.9514224 #>  [737,] 0.9042383 #>  [738,] 1.0211781 #>  [739,] 0.8817560 #>  [740,] 0.7894223 #>  [741,] 1.0283599 #>  [742,] 0.8769752 #>  [743,] 0.9744351 #>  [744,] 0.9268765 #>  [745,] 0.9634187 #>  [746,] 0.7963082 #>  [747,] 1.2244823 #>  [748,] 0.9015594 #>  [749,] 0.7143487 #>  [750,] 0.7222938 #>  [751,] 0.9343185 #>  [752,] 0.7365599 #>  [753,] 1.1432218 #>  [754,] 1.3335200 #>  [755,] 0.8878783 #>  [756,] 0.9665502 #>  [757,] 0.9966655 #>  [758,] 0.7274907 #>  [759,] 1.0647946 #>  [760,] 0.7413700 #>  [761,] 0.6850779 #>  [762,] 1.2216442 #>  [763,] 0.7314757 #>  [764,] 1.0673306 #>  [765,] 1.0174968 #>  [766,] 1.0532104 #>  [767,] 1.1195274 #>  [768,] 0.8386012 #>  [769,] 1.2150644 #>  [770,] 0.9974715 #>  [771,] 0.9321944 #>  [772,] 0.8918291 #>  [773,] 0.9143208 #>  [774,] 0.8863242 #>  [775,] 0.9586352 #>  [776,] 1.0820246 #>  [777,] 1.0910773 #>  [778,] 1.0097606 #>  [779,] 1.1326244 #>  [780,] 1.1055385 #>  [781,] 1.0310092 #>  [782,] 1.1468535 #>  [783,] 0.9110677 #>  [784,] 1.1843122 #>  [785,] 0.7687125 #>  [786,] 0.8411831 #>  [787,] 0.9845793 #>  [788,] 1.0372791 #>  [789,] 0.9314136 #>  [790,] 1.2270130 #>  [791,] 1.0451799 #>  [792,] 0.9627125 #>  [793,] 0.9762730 #>  [794,] 1.0904431 #>  [795,] 0.9679510 #>  [796,] 1.0618300 #>  [797,] 0.8882273 #>  [798,] 1.0302372 #>  [799,] 1.0490691 #>  [800,] 0.8763228 #>  [801,] 1.2290427 #>  [802,] 1.0486998 #>  [803,] 1.1274379 #>  [804,] 0.7259114 #>  [805,] 0.9883950 #>  [806,] 0.9823547 #>  [807,] 0.9246579 #>  [808,] 0.9602757 #>  [809,] 0.9332876 #>  [810,] 1.1312141 #>  [811,] 1.1734558 #>  [812,] 1.0661924 #>  [813,] 1.0003939 #>  [814,] 1.0672860 #>  [815,] 1.0123767 #>  [816,] 1.1947655 #>  [817,] 0.8975529 #>  [818,] 1.1855754 #>  [819,] 0.8491110 #>  [820,] 0.7057612 #>  [821,] 0.8562846 #>  [822,] 0.9965638 #>  [823,] 0.8708225 #>  [824,] 0.9470710 #>  [825,] 1.0400134 #>  [826,] 1.0726643 #>  [827,] 1.1726005 #>  [828,] 1.2086533 #>  [829,] 1.0913241 #>  [830,] 1.1243160 #>  [831,] 1.0615919 #>  [832,] 0.8216947 #>  [833,] 1.0079054 #>  [834,] 0.8753524 #>  [835,] 1.0094893 #>  [836,] 1.0373924 #>  [837,] 1.1345786 #>  [838,] 1.0145793 #>  [839,] 0.8579079 #>  [840,] 1.1903528 #>  [841,] 1.0747589 #>  [842,] 0.9615744 #>  [843,] 0.8234668 #>  [844,] 0.9322214 #>  [845,] 0.9584948 #>  [846,] 1.0356249 #>  [847,] 1.0903393 #>  [848,] 1.0294557 #>  [849,] 0.8646762 #>  [850,] 1.0170805 #>  [851,] 1.1092651 #>  [852,] 1.0186068 #>  [853,] 0.9812997 #>  [854,] 1.3870611 #>  [855,] 0.7852398 #>  [856,] 1.0849645 #>  [857,] 1.0971422 #>  [858,] 1.1423506 #>  [859,] 0.8514742 #>  [860,] 0.8586384 #>  [861,] 1.1125999 #>  [862,] 1.3306543 #>  [863,] 0.8907934 #>  [864,] 1.2407285 #>  [865,] 0.8813790 #>  [866,] 0.8599535 #>  [867,] 0.9794722 #>  [868,] 0.9624203 #>  [869,] 1.2976239 #>  [870,] 0.9427548 #>  [871,] 0.6848584 #>  [872,] 0.8638422 #>  [873,] 1.0041880 #>  [874,] 1.0050711 #>  [875,] 0.8705173 #>  [876,] 1.0461694 #>  [877,] 1.0975571 #>  [878,] 0.9218289 #>  [879,] 1.1925541 #>  [880,] 1.0748530 #>  [881,] 1.0503834 #>  [882,] 0.9653368 #>  [883,] 0.8341826 #>  [884,] 0.8074032 #>  [885,] 0.8980552 #>  [886,] 1.0412537 #>  [887,] 1.0634914 #>  [888,] 0.9524354 #>  [889,] 0.9584669 #>  [890,] 1.1501224 #>  [891,] 0.7443589 #>  [892,] 0.7818467 #>  [893,] 1.0904603 #>  [894,] 1.1451015 #>  [895,] 1.0117808 #>  [896,] 0.9638333 #>  [897,] 1.1252851 #>  [898,] 0.8219392 #>  [899,] 0.9435130 #>  [900,] 1.2084872 #>  [901,] 0.9892081 #>  [902,] 0.9872470 #>  [903,] 0.9805661 #>  [904,] 0.7295815 #>  [905,] 1.1827114 #>  [906,] 1.1715837 #>  [907,] 0.9633809 #>  [908,] 1.2614065 #>  [909,] 0.8837230 #>  [910,] 0.7998724 #>  [911,] 0.9270456 #>  [912,] 1.1225301 #>  [913,] 0.9205861 #>  [914,] 0.8899751 #>  [915,] 0.8896505 #>  [916,] 0.9834856 #>  [917,] 0.9293675 #>  [918,] 0.8878096 #>  [919,] 1.0663903 #>  [920,] 1.3705118 #>  [921,] 1.0070739 #>  [922,] 0.9096152 #>  [923,] 0.8208665 #>  [924,] 0.8963723 #>  [925,] 0.7858749 #>  [926,] 0.9875366 #>  [927,] 1.1461354 #>  [928,] 1.2091222 #>  [929,] 0.8796776 #>  [930,] 0.7595834 #>  [931,] 0.8901984 #>  [932,] 0.9553409 #>  [933,] 1.1849003 #>  [934,] 1.0756833 #>  [935,] 1.0421294 #>  [936,] 1.2174897 #>  [937,] 1.3584929 #>  [938,] 0.8969126 #>  [939,] 1.0346314 #>  [940,] 0.8418965 #>  [941,] 1.0955451 #>  [942,] 0.8551862 #>  [943,] 0.9184110 #>  [944,] 0.9764723 #>  [945,] 0.8349203 #>  [946,] 1.4211638 #>  [947,] 0.8549632 #>  [948,] 0.7907566 #>  [949,] 0.7753938 #>  [950,] 0.8607883 #>  [951,] 1.1366869 #>  [952,] 1.1100995 #>  [953,] 0.7605988 #>  [954,] 0.9662910 #>  [955,] 0.8034169 #>  [956,] 0.9587203 #>  [957,] 1.0760276 #>  [958,] 1.1605271 #>  [959,] 1.0809408 #>  [960,] 0.7490553 #>  [961,] 0.9041994 #>  [962,] 1.0519269 #>  [963,] 0.7184345 #>  [964,] 0.7766239 #>  [965,] 0.8470304 #>  [966,] 0.9560475 #>  [967,] 1.0300836 #>  [968,] 0.7899672 #>  [969,] 0.8874991 #>  [970,] 0.7152039 #>  [971,] 1.0113447 #>  [972,] 0.9020262 #>  [973,] 0.8178562 #>  [974,] 0.8381583 #>  [975,] 0.8982932 #>  [976,] 1.0940034 #>  [977,] 1.0599062 #>  [978,] 1.0528940 #>  [979,] 1.2487463 #>  [980,] 0.9231418 #>  [981,] 1.0206454 #>  [982,] 0.7648770 #>  [983,] 1.0190854 #>  [984,] 1.2908722 #>  [985,] 1.1496074 #>  [986,] 1.1397610 #>  [987,] 0.9529760 #>  [988,] 0.9563116 #>  [989,] 1.1517331 #>  [990,] 0.9429306 #>  [991,] 1.2143095 #>  [992,] 0.9450069 #>  [993,] 1.1551225 #>  [994,] 0.9913047 #>  [995,] 0.9114763 #>  [996,] 0.7831964 #>  [997,] 0.9744489 #>  [998,] 0.8037263 #>  [999,] 1.1512018 #> [1000,] 1.0430976 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_replicate_term_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","title":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","text":"Extract term replicates randomN times linear model. Used population mean variance terms.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_replicate_term_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","text":"","code":"extract_replicate_term_to_matrix(object, term)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_replicate_term_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","text":"object object class cumhist term String, term name","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_replicate_term_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","text":"Matrix","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_replicate_term_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a term and replicates it randomN times for each linear model — extract_replicate_term_to_matrix","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 3.997 seconds (Warm-up) #> Chain 1:                4.474 seconds (Sampling) #> Chain 1:                8.471 seconds (Total) #> Chain 1:  bH_mu <- extract_replicate_term_to_matrix(br_fit, \"bH_mu\") # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_term_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","title":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","text":"Extracts 3D array term  sample, linear-model, random/fixed-effect order returns matrix samples rows columns order 1) random/fixed effects lm1, 2) random/fixed effects lm2, etc.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_term_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","text":"","code":"extract_term_to_matrix(object, term)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_term_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","text":"object object class cumhist term String, term name","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_term_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","text":"Matrix","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/extract_term_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts a term with one column per fixed or random-level into a matrix — extract_term_to_matrix","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 5.256 seconds (Warm-up) #> Chain 1:                6.414 seconds (Sampling) #> Chain 1:                11.67 seconds (Total) #> Chain 1:  a <- extract_term_to_matrix(br_fit, \"a\") # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fast_history_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes cumulative history — fast_history_compute","title":"Computes cumulative history — fast_history_compute","text":"Computes cumulative history based common history values normalized_tau mixed_state defined random cluster / individual.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fast_history_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes cumulative history — fast_history_compute","text":"","code":"fast_history_compute(df, normalized_tau, mixed_state, history_init)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fast_history_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes cumulative history — fast_history_compute","text":"df DataFrame \"state\" (integer, 1 2 clear state, 3 - mixed state), \"duration\" (double), \"irandom\" (integer, 1-based index random cluster), \"run_start\" (integer, 1 first entry run, 0 otherwise), \"session_tmean\" (double) normalized_tau DoubleVector normalized tau value random cluster / individual. Thus, length must equal number unique indexes df[\"irandom\"]. mixed_state DoubleVector values used mixed state random cluster / individual. Thus, length must equal number unique indexes df[\"irandom\"]. history_init DoubleVector, size 2. Initial values history run.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fast_history_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes cumulative history — fast_history_compute","text":"NumericMatrix, size df.nrows() × 2. Computed history values state.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fast_history_compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes cumulative history — fast_history_compute","text":"","code":"df <- preprocess_data(br_singleblock, state=\"State\", duration=\"Duration\") fast_history_compute(df, 1, 0.5, c(0, 0)) #>            [,1]      [,2] #>  [1,] 0.0000000 0.0000000 #>  [2,] 0.4376245 0.0000000 #>  [3,] 0.2248001 0.4863174 #>  [4,] 0.5370311 0.2904410 #>  [5,] 0.3175173 0.5804763 #>  [6,] 0.7942799 0.1749725 #>  [7,] 0.3132936 0.6745784 #>  [8,] 0.7598867 0.2358726 #>  [9,] 0.3433397 0.6547442 #> [10,] 0.6965069 0.3026075 #> [11,] 0.2560426 0.7436319 #> [12,] 0.8299162 0.1700093 #> [13,] 0.2604354 0.7395412 #> [14,] 0.7793057 0.2206873 #> [15,] 0.2923041 0.7076933 #> [16,] 0.7242782 0.2757208 #> [17,] 0.2635858 0.7364139 #> [18,] 0.6656717 0.3343282 #> [19,] 0.2860841 0.7139159 #> [20,] 0.6830619 0.3169381 #> [21,] 0.2687481 0.7312519 #> [22,] 0.7078426 0.2921574 #> [23,] 0.2382783 0.7617217 #> [24,] 0.7680728 0.2319272 #> [25,] 0.2852782 0.7147218 #> [26,] 0.7072458 0.2927542 #> [27,] 0.1819388 0.8180612 #> [28,] 0.7432848 0.2567152 #> [29,] 0.1750940 0.8249060 #> [30,] 0.8001760 0.1998240 #> [31,] 0.3180102 0.6819898 #> [32,] 0.7615359 0.2384641 #> [33,] 0.2914458 0.7085542 #> [34,] 0.7596148 0.2403852 #> [35,] 0.2034366 0.7965634 #> [36,] 0.6951489 0.3048511 #> [37,] 0.2406317 0.7593683 #> [38,] 0.8414246 0.1585754 #> [39,] 0.2346019 0.7653981 #> [40,] 0.7297327 0.2702673 #> [41,] 0.3873127 0.6126873 #> [42,] 0.6004087 0.3995913 #> [43,] 0.2392187 0.7607813 #> [44,] 0.8170950 0.1829050 #> [45,] 0.2943872 0.7056128 #> [46,] 0.8273447 0.1726553 #> [47,] 0.4390107 0.5609893 #> [48,] 0.5861278 0.4138722 #> [49,] 0.5578937 0.4421063 #> [50,] 0.3460013 0.6539987 #> [51,] 0.4304187 0.5695813 #> [52,] 0.6422788 0.3577212 #> [53,] 0.2552579 0.7447421 #> [54,] 0.6971667 0.3028333 #> [55,] 0.1779976 0.8220024 #> [56,] 0.8571432 0.1428568 #> [57,] 0.3151733 0.6848267 #> [58,] 0.4343504 0.5656496 #> [59,] 0.4702628 0.5297372 #> [60,] 0.6474848 0.3525152 #> [61,] 0.2304212 0.7695788 #> [62,] 0.6194160 0.3805840 #> [63,] 0.3033325 0.6966675 #> [64,] 0.7791682 0.2208318 #> [65,] 0.2123805 0.7876195 #> [66,] 0.6503417 0.3496583 #> [67,] 0.2997422 0.7002578 #> [68,] 0.7951472 0.2048528 #> [69,] 0.2108206 0.7891794 #> [70,] 0.8029713 0.1970287 #> [71,] 0.1445517 0.8554483 #> [72,] 0.8513307 0.1486693 #> [73,] 0.2774292 0.7225708 #> [74,] 0.7645307 0.2354693 #> [75,] 0.2153185 0.7846815 #> [76,] 0.8174648 0.1825352"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fit_cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","title":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","text":"Fits generalized linear model using cumulative history specified fixed effects.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fit_cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","text":"","code":"fit_cumhist(   data,   state,   duration = NULL,   onset = NULL,   random_effect = NULL,   session = NULL,   run = NULL,   fixed_effects = NULL,   tau = NULL,   mixed_state = 0.5,   history_init = 0,   family = \"gamma\",   history_priors = NULL,   intercept_priors = NULL,   history_effect_prior = NULL,   fixed_effects_priors = NULL,   chains = 1,   cores = NULL,   ... )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fit_cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","text":"data table time-series. state String, name column specifies perceptual state. column type factor two three levels (third level assumed correspond transition/mixed phase) convertible two level factor (impossible infer identity transition/ mixed phase). duration String, name column duration individual perceptual dominance phases. Optional, can specify onset instead. onset String, name column onsets perceptual dominance states. Optional, used compute duration dominance phases, provided explicitly via duration parameter. random_effect String, name column identifies random effect, e.g. individual participants, stimuli single participant, etc. omitted, random effect assumed. specified one level (participant, stimulus, etc.), used hierarchical model. session String, name column identifies unique experimental session mean dominance phase duration computed (see norm_tau parameter). Code assumes session IDs different within participant can . omitted, single mean dominance duration based entire time series used. run String, name column identifies unique runs/blocks. omitted, data assumed belong single time series. Code assumes run IDs different within experimental session can session. E.g. session , runs 1, 2, 3.. session B, runs 1, 2, 3 session , runs 1, 2, 1. fixed_effects String vector strings. Name column(s) values used fitting additional fixed effect(s). E.g., contrast binocular rivalry, rotation speed kinetic-depth effect, etc. tau Time constant exponential growth/decay normalized mean duration clear percepts within session. Can 1) single positive number (>0) used participants runs, 2) NULL (default) -  single value fitted participants runs, 3) \"random\" - independent tau fitted random cluster, 4) \"1|random\"- tau random cluster sampled population distribution, .e., pooled parameter values via multilevel model. mixed_state Specifies activation level transition/mixed phases (state #3, see state). Either single number (range 0..1) used fixed level vector two numbers c(mu, kappa) specifies, correspondingly, mean (range 0..1) precision (>0) beta proportion distribution, sampled . Defaults fixed value 0.5. history_init Initial value cumulative history computation. Either numeric scalar 0..1 range vector two numbers 0..1 range. latter case, two histories start different levels. family String, distribution used fit duration perceptual dominance phases. Options include \"gamma\" (default), \"lognormal\", \"normal\". history_priors Named list optional priors population-level cumulative history parameters. Must follow format list(\"tau\"=c(1, 0.15)) values coding mean standard deviation normal distribution. intercept_priors vector optional priors population-level intercept parameter. c(<shape-mean>, <shape-sd>, <scale-mean>, <scale-sd>) format Gamma family, c(<mean>, <sd>) normal lognormal families. values code mean standard deviation normal distribution. history_effect_prior vector options priors population-level slope history effect. values code mean standard deviation normal distribution. Defaults mu=0, sigma=1. fixed_effects_priors named list optional priors fixed effects. Must follow format list(\"<name--variable>\"=c(<mu>, <sigma>)), <mu> <sigma> mean standard deviation normal distribution. Defaults mu=0, sigma=1. chains Number chains sampling. cores Number CPU cores use sampling. omitted, cores used. ... Additional arguments passed rstan::sampling() function.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fit_cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","text":"object class cumhist","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fit_cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits cumulative history for bistable perceptual rivalry displays. — fit_cumhist","text":"","code":"# \\donttest{ data(br_singleblock) gamma_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.518 seconds (Warm-up) #> Chain 1:                4.537 seconds (Sampling) #> Chain 1:                9.055 seconds (Total) #> Chain 1:  # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fixef.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the fixed-effects estimates — fixef","title":"Extract the fixed-effects estimates — fixef","text":"Extracts models fixed-effect terms every modeled distribution parameter.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fixef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the fixed-effects estimates — fixef","text":"","code":"fixef(object, summary = TRUE, probs = c(0.055, 0.945))"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fixef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the fixed-effects estimates — fixef","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fixef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the fixed-effects estimates — fixef","text":"tibble values summary, NULL fixed effects used.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/fixef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the fixed-effects estimates — fixef","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock,                       state = \"State\",                       duration = \"Duration\",                       fixed_effects = \"Time\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 49.13 seconds (Warm-up) #> Chain 1:                262.176 seconds (Sampling) #> Chain 1:                311.306 seconds (Total) #> Chain 1:  #> Warning: There were 878 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See #> https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: The largest R-hat is 1.14, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess fixef(br_fit) #> # A tibble: 2 x 5 #>   DistributionParameter Term  Estimate    `5.5%`  `94.5%` #>   <fct>                 <fct>    <dbl>     <dbl>    <dbl> #> 1 shape                 Time  -0.00348 -0.00684  0.000195 #> 2 scale                 Time   0.00378  0.000158 0.00728  # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/historyef.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the history-effects estimates — historyef","title":"Extract the history-effects estimates — historyef","text":"Extracts models population-level coefficients history-specific terms every modeled distribution parameter.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/historyef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the history-effects estimates — historyef","text":"","code":"historyef(object, summary = TRUE, probs = c(0.055, 0.945))"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/historyef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the history-effects estimates — historyef","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/historyef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the history-effects estimates — historyef","text":"data.frame values summary","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/historyef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the history-effects estimates — historyef","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.881 seconds (Warm-up) #> Chain 1:                4.963 seconds (Sampling) #> Chain 1:                9.844 seconds (Total) #> Chain 1:  historyef(br_fit) #> # A tibble: 2 x 4 #>   DistributionParameter Estimate `5.5%` `94.5%` #>   <fct>                    <dbl>  <dbl>   <dbl> #> 1 shape                    1.05   0.104    2.00 #> 2 scale                    0.279 -0.767    1.30 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_mixed_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","title":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","text":"short-cut history_parameter(object, \"mixed_state\", ...).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_mixed_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","text":"","code":"history_mixed_state(   object,   summary = TRUE,   probs = c(0.055, 0.945),   includePopulationLevel = TRUE )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_mixed_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval. includePopulationLevel Logical, pooled random effect . Whether include population mean separate \"_population\" level, default TRUE.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_mixed_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","text":"single value, fixed value used. vector tibble, depending option used (single intercept, independent random intercepts), whether summary requested.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_mixed_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values of used or fitted history parameter mixed_state — history_mixed_state","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 5.096 seconds (Warm-up) #> Chain 1:                5.428 seconds (Sampling) #> Chain 1:                10.524 seconds (Total) #> Chain 1:  history_tau(br_fit) #> # A tibble: 1 x 3 #>   Estimate `5.5%` `94.5%` #>      <dbl>  <dbl>   <dbl> #> 1    0.982  0.786    1.20 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values of used or fitted history parameter — history_parameter","title":"Extract values of used or fitted history parameter — history_parameter","text":"Extract values used fitted history parameter","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values of used or fitted history parameter — history_parameter","text":"","code":"history_parameter(   object,   param,   summary = TRUE,   probs = c(0.055, 0.945),   includePopulationLevel = TRUE )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values of used or fitted history parameter — history_parameter","text":"object object class cumhist param Parameter name: \"tau\" \"mixed_state\" summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval. includePopulationLevel Logical, pooled random effect . Whether include population mean separate \"_population\" level, default TRUE.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values of used or fitted history parameter — history_parameter","text":"vector, summary requested. tibble summary fixed value used.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values of used or fitted history parameter — history_parameter","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.848 seconds (Warm-up) #> Chain 1:                4.601 seconds (Sampling) #> Chain 1:                9.449 seconds (Total) #> Chain 1:  history_parameter(br_fit, \"tau\") #> # A tibble: 1 x 3 #>   Estimate `5.5%` `94.5%` #>      <dbl>  <dbl>   <dbl> #> 1    0.990  0.787    1.23 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values of used or fitted history parameter tau — history_tau","title":"Extract values of used or fitted history parameter tau — history_tau","text":"short-cut history_parameter(object, \"tau\", ...).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values of used or fitted history parameter tau — history_tau","text":"","code":"history_tau(   object,   summary = TRUE,   probs = c(0.055, 0.945),   includePopulationLevel = TRUE )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values of used or fitted history parameter tau — history_tau","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults 89% credible interval. includePopulationLevel Logical, pooled random effect . Whether include population mean separate \"_population\" level, default TRUE.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values of used or fitted history parameter tau — history_tau","text":"single value, fixed value used. vector tibble, depending option used (single intercept, independent random intercepts), whether summary requested.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/history_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values of used or fitted history parameter tau — history_tau","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.492 seconds (Warm-up) #> Chain 1:                5.301 seconds (Sampling) #> Chain 1:                9.793 seconds (Total) #> Chain 1:  history_tau(br_fit) #> # A tibble: 1 x 3 #>   Estimate `5.5%` `94.5%` #>      <dbl>  <dbl>   <dbl> #> 1    0.977  0.771    1.21 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde.html","id":null,"dir":"Reference","previous_headings":"","what":"Kinetic-depth effect data — kde","title":"Kinetic-depth effect data — kde","text":"Dataset kinetic-depth effect eleven participants.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kinetic-depth effect data — kde","text":"","code":"kde"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kinetic-depth effect data — kde","text":"data frame 38698 rows 6 variables: Observer Participant ID. Display Display, rows contain \"KD\" Block Run / block index. Time Time relative run onset seconds State Factor levels \"Left\", \"Right\" (clear states), \"Mixed\" Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Kinetic-depth effect data — kde","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde_two_observers.html","id":null,"dir":"Reference","previous_headings":"","what":"Multirun data for two participants, kinetic-depth effect display — kde_two_observers","title":"Multirun data for two participants, kinetic-depth effect display — kde_two_observers","text":"Multirun data two participants, kinetic-depth effect display","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde_two_observers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multirun data for two participants, kinetic-depth effect display — kde_two_observers","text":"","code":"kde_two_observers"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde_two_observers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multirun data for two participants, kinetic-depth effect display — kde_two_observers","text":"data frame 1186 rows 5 variables: Observer Participant ID Block Run / block index State Factor variable state levels -1 1 coding two clear perceptual states -2 mixed / transition phase Time Time relative run onset seconds Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/kde_two_observers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Multirun data for two participants, kinetic-depth effect display — kde_two_observers","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/loo.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","title":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","text":"Computes efficient approximate leave-one-cross-validation via loo library. can used model comparison via loo::loo_compare() function.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/loo.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","text":"","code":"# S3 method for cumhist loo(x, ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/loo.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","text":"x cumhist object ... unused","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/loo.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","text":"named list, see loo::loo() details.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/loo.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes an efficient approximate leave-one-out\r\ncross-validation via loo library. It can be used\r\nfor a model comparison via loo::loo_compare() function. — loo.cumhist","text":"","code":"data(br_singleblock) # \\donttest{ gamma_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 5.032 seconds (Warm-up) #> Chain 1:                4.528 seconds (Sampling) #> Chain 1:                9.56 seconds (Total) #> Chain 1:  loo_gamma <- loo(gamma_fit) #> Warning: Some Pareto k diagnostic values are slightly high. See help('pareto-k-diagnostic') for details. # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Necker cube data — nc","title":"Necker cube data — nc","text":"Dataset Necker cube five participants.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Necker cube data — nc","text":"","code":"nc"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/nc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Necker cube data — nc","text":"data frame 3464 rows 6 variables: Observer Participant ID. Display Display, rows contain \"NC\" Block Run / block index. Time Time relative run onset seconds State Factor levels \"Left\", \"Right\" (clear states), \"Mixed\" Duration Duration dominance phase seconds. Note duration last dominance phase curtailed , therefore, set zero.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/nc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Necker cube data — nc","text":"doi:10.1167/11.10.12","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","title":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","text":"Computes predicted dominance phase durations using fitted model.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","text":"","code":"# S3 method for cumhist predict(   object,   summary = TRUE,   probs = NULL,   full_length = TRUE,   predict_history = NULL,   ... )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","text":"object object class cumhist summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults NULL (CI). full_length summary = TRUE, whether summary table include rows predictions. .e., rows mixed phases, first/last dominance phase run, etc. See preprocess_data(). Defaults TRUE. predict_history Option predict cumulative history state (difference). disabled default setting NULL. can specify \"1\" \"2\" cumulative history first second perceptual states (indexes 1 2, respectively), \"dominant\" \"suppressed\" cumulative history states either dominant suppressed following phase, \"difference\" difference suppressed dominant. See cumulative history vignette details. ... Unused","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","text":"summary=FALSE, numeric matrix iterationsN x clearN. summary=TRUE probs=NULL vector mean predicted durations requested cumulative history values. summary=TRUE probs NULL, data.frame column \"Predicted\" (mean) column specified quantile.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes predicted dominance phase durations using posterior predictive distribution. — predict.cumhist","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.393 seconds (Warm-up) #> Chain 1:                5.113 seconds (Sampling) #> Chain 1:                9.506 seconds (Total) #> Chain 1:  predict(br_fit) #>  [1]       NA       NA 3.111925 3.038940 3.108320 4.978573 3.556128 4.392861 #>  [9] 3.324947 3.697454 4.186017 5.256282 4.150889 4.602041 3.813495 3.978832 #> [17] 4.107675 3.412406 3.866068 3.570002 4.050164 3.811569 4.391107 4.467650 #> [25] 3.885314 3.803299 5.091503 4.191165 5.187422 4.862474 3.569223 4.384790 #> [33] 3.821754 4.367063 4.813696 3.693666 4.361824 5.414457 4.442852 4.041422 #> [41] 2.964934 2.858787 4.374155 5.081645 3.797854 5.218570 2.600773       NA #> [49] 2.545678       NA 2.619134 3.206757 4.191966 3.708508 5.145146 5.642685 #> [57] 3.601663       NA 2.363356 3.245703 4.477596 3.025451 3.688626 4.595827 #> [65] 4.705550 3.282014 3.727020 4.793072 4.725245 4.898412 5.619271 5.559445 #> [73] 3.974080 4.424304 4.665970       NA  # full posterior prediction samples predictions_samples <- predict(br_fit, summary=FALSE) # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","title":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","text":"Computes predicted cumulative history using fitted model. just wrapper predict(object, summary, probs, full_length, predict_history=history_type).","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","text":"","code":"predict_history(   object,   history_type,   summary = TRUE,   probs = NULL,   full_length = TRUE,   ... )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","text":"object object class cumhist history_type \"1\" \"2\" cumulative history first second perceptual states (indexes 1 2, respectively), \"dominant\" \"suppressed\" cumulative history states either dominant suppressed following phase, \"difference\" difference suppressed dominant. See cumulative history vignette details. summary Whether summary statistics returned instead raw sample values. Defaults TRUE probs percentiles used compute summary, defaults NULL (CI). full_length summary = TRUE, whether summary table include rows predictions. .e., rows mixed phases, first/last dominance phase run, etc. See preprocess_data(). Defaults TRUE. ... Unused","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","text":"summary=FALSE, numeric matrix iterationsN x clearN. summary=TRUE probs=NULL vector requested cumulative history values. summary=TRUE probs NULL, data.frame column \"Predicted\" (mean) column specified quantile.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes predicted cumulative history using posterior predictive distribution. — predict_history","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state = \"State\", duration = \"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.338 seconds (Warm-up) #> Chain 1:                4.486 seconds (Sampling) #> Chain 1:                8.824 seconds (Total) #> Chain 1:  history_difference_summary <- predict_history(br_fit, \"difference\")  # full posterior prediction samples history_difference <- predict_history(br_fit,                                       \"difference\",                                       summary = FALSE,                                       full_length = TRUE) # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes prediction for a each sample. — predict_samples","title":"Computes prediction for a each sample. — predict_samples","text":"Computing prediction sample, recomputing cumulative history uses fitted parameter values.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes prediction for a each sample. — predict_samples","text":"","code":"predict_samples(   family,   fixedN,   randomN,   lmN,   istate,   duration,   is_used,   run_start,   session_tmean,   irandom,   fixed,   tau_ind,   mixed_state_ind,   history_init,   a,   bH,   bF,   sigma )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes prediction for a each sample. — predict_samples","text":"family int, distribution family: gamma (1), lognormal(2), normal (3). fixedN int, number fixed parameters (>= 0). randomN int, number random factors (>= 1). lmN int, number linear models (>= 1). istate IntegerVector, zero-based perceptual state 0 1, 2 mixed state. duration DoubleVector, duration dominance phase. is_used IntegerVector, whether dominance phase used prediction (1) (0). run_start IntegerVector, 1 whenever new run starts. session_tmean DoubleVector, average dominance phase duration. irandom IntegerVector, zero-based index random effect. fixed NumericMatrix, matrix fixed effect values. tau_ind NumericMatrix, matrix samples tau random level. mixed_state_ind NumericMatrix, matrix samples mixed_state random level. history_init DoubleVector, Initial values history run NumericMatrix, matrix samples (intercept) random level. bH NumericMatrix, matrix sample bH linear model random level. bF NumericMatrix, matrix sample bF linear model fixed factor. sigma DoubleVector, samples sigma.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/predict_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes prediction for a each sample. — predict_samples","text":"NumericMatrix predicted durations sample.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/preprocess_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocesses time-series data for fitting — preprocess_data","title":"Preprocesses time-series data for fitting — preprocess_data","text":"Performs sanity checks (e.g., whether data can used data.frame), computes duration dominance phases (necessary), assumes single entry missing session, run, random_effect.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/preprocess_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocesses time-series data for fitting — preprocess_data","text":"","code":"preprocess_data(   data,   state,   duration = NULL,   onset = NULL,   random_effect = NULL,   session = NULL,   run = NULL )"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/preprocess_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocesses time-series data for fitting — preprocess_data","text":"data table one many time-series. state String, name column specifies perceptual state. column type factor two three levels (third level assumed correspond transition/mixed phase) convertible two level factor (impossible infer identity transition/ mixed phase). duration String, name column duration individual perceptual dominance phases. Optional, can specify onset instead. onset String, name column onsets perceptual dominance states. Optional, used compute duration dominance phases, provided explicitly via duration parameter. random_effect String, name column identifies random effect, e.g. individual participants, stimuli single participant, etc. omitted, random effect assumed. specified one level (participant, stimulus, etc.), used hierarchical model. session String, name column identifies unique experimental session mean dominance phase duration computed (see norm_tau parameter). Code assumes session IDs different within participant can . omitted, single mean dominance duration based entire time series used. run String, name column identifies unique runs/blocks. omitted, data assumed belong single time series. Code assumes run IDs different within experimental session can session. E.g. session , runs 1, 2, 3.. session B, runs 1, 2, 3 session , runs 1, 2, 1.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/preprocess_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocesses time-series data for fitting — preprocess_data","text":"tibble columns state duration random irandom - integer, index random values, session run session_tmean - numeric, mean duration clear percepts every combination random session. is_used - integer, whether computed history value needs used linear model fitting. run_start - integer, 1 first row run time-series.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/preprocess_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocesses time-series data for fitting — preprocess_data","text":"","code":"df <- preprocess_data(br_singleblock, state=\"State\", duration=\"Duration\")"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/print.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints out cumhist object — print.cumhist","title":"Prints out cumhist object — print.cumhist","text":"Prints cumhist object","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/print.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints out cumhist object — print.cumhist","text":"","code":"# S3 method for cumhist print(x, ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/print.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints out cumhist object — print.cumhist","text":"x cumhist object ... Unused","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/print.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints out cumhist object — print.cumhist","text":"Nothing, console output .","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/print.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints out cumhist object — print.cumhist","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\", fixed_effects=\"Time\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 25.307 seconds (Warm-up) #> Chain 1:                13.833 seconds (Sampling) #> Chain 1:                39.14 seconds (Total) #> Chain 1:  br_fit #> Call: fit_cumhist(data = br_singleblock, state = \"State\", duration = \"Duration\",  #>     fixed_effects = \"Time\") #>  #> Family: gamma # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/summary.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for a cumhist object — summary.cumhist","title":"Summary for a cumhist object — summary.cumhist","text":"Summary cumhist object","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/summary.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for a cumhist object — summary.cumhist","text":"","code":"# S3 method for cumhist summary(object, ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/summary.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for a cumhist object — summary.cumhist","text":"object cumhist object ... Unused","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/summary.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for a cumhist object — summary.cumhist","text":"Nothing, console output .","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/summary.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for a cumhist object — summary.cumhist","text":"","code":"# \\donttest{ br_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.321 seconds (Warm-up) #> Chain 1:                4.917 seconds (Sampling) #> Chain 1:                9.238 seconds (Total) #> Chain 1:  summary(br_fit) #> Call: fit_cumhist(data = br_singleblock, state = \"State\", duration = \"Duration\") #>  #> Family: gamma #>  #> History parameters: #> tau = 0.99 #> mixed state = 0.5 #>  #> Linear model: #> # A tibble: 2 x 5 #>   DistributionParameter Term    Estimate  `5.5%` `94.5%` #>   <fct>                 <chr>      <dbl>   <dbl>   <dbl> #> 1 shape                 History    1.02   0.0693    1.93 #> 2 scale                 History    0.296 -0.702     1.35 # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/waic.cumhist.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","title":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","text":"Computes widely applicable information criterion via loo library. can used model comparison via loo::loo_compare() function.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/waic.cumhist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","text":"","code":"# S3 method for cumhist waic(x, ...)"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/waic.cumhist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","text":"x cumhist object. ... Additional arguments (unused)","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/waic.cumhist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","text":"named list, see loo::waic() details.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/reference/waic.cumhist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes widely applicable information criterion\r\n(WAIC). — waic.cumhist","text":"","code":"# \\donttest{ data(br_singleblock) gamma_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 4.187 seconds (Warm-up) #> Chain 1:                4.583 seconds (Sampling) #> Chain 1:                8.77 seconds (Total) #> Chain 1:  waic_gamma <- waic(gamma_fit) #> Warning:  #> 2 (2.9%) p_waic estimates greater than 0.4. We recommend trying loo instead. normal_fit <- fit_cumhist(br_singleblock, state=\"State\", duration=\"Duration\", family=\"normal\") #>  #> SAMPLING FOR MODEL 'historylm' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.649 seconds (Warm-up) #> Chain 1:                0.621 seconds (Sampling) #> Chain 1:                1.27 seconds (Total) #> Chain 1:  waic_normal <- waic(normal_fit) #> Warning:  #> 1 (1.4%) p_waic estimates greater than 0.4. We recommend trying loo instead. loo::loo_compare(waic_gamma, waic_normal) #>        elpd_diff se_diff #> model2  0.0       0.0    #> model1 -2.6       4.5    # }"},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"bistablehistory-100","dir":"Changelog","previous_headings":"","what":"bistablehistory 1.0.0","title":"bistablehistory 1.0.0","text":"CRAN release: 2021-09-28","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"first-cran-release-1-0-0","dir":"Changelog","previous_headings":"","what":"First CRAN Release","title":"bistablehistory 1.0.0","text":"Initial CRAN Release","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"bistablehistory-110","dir":"Changelog","previous_headings":"","what":"bistablehistory 1.1.0","title":"bistablehistory 1.1.0","text":"CRAN release: 2022-01-13","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"bistablehistory 1.1.0","text":"Custom prior values history parameters, intercept terms, history effect, fixed effects. Simplified Stan code. predict() computes values history, reducing fit object size. predict() returns vector length matches original table.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"bistablehistory 1.1.0","text":"Change difference history values instead weighted mean. Use scale instead rate prediction Gamma family. Spelling documentation. Additional tests.","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"bistablehistory-111","dir":"Changelog","previous_headings":"","what":"bistablehistory 1.1.1","title":"bistablehistory 1.1.1","text":"CRAN release: 2022-03-22","code":""},{"path":"https://alexander-pastukhov.github.io/bistablehistory/news/index.html","id":"improvements-1-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"bistablehistory 1.1.1","text":"Posterior samples cumulative history","code":""}]
